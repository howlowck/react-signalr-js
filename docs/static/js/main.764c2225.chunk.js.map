{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","connectEndpoint","useSelector","state","joinEndpoint","sendEndpoint","userId","messages","connected","messageValue","groupNameValue","groupJoined","joined","dispatch","useDispatch","onSendFunc","onSendClick","onJoinFunc","onJoinClick","onConnectFunc","onConnectClick","onSubmit","evt","preventDefault","placeholder","value","onChange","type","endpoint","target","style","width","disabled","onClick","className","id","map","_","index","key","message","fontSize","Boolean","window","location","hostname","match","defaultState","localStorage","getItem","members","shortid","generate","console","log","store","createStore","prev","action","setItem","groupName","ReactDOM","render","connection","signalR","withUrl","transport","WebSockets","build","on","data","newMember","start","then","info","connectionId","group","fetch","method","headers","body","JSON","stringify","messageData","targetGroupName","name","catch","err","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.764c2225.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport './App.css';\n\n\nfunction App(props) {\n  const connectEndpoint = useSelector(state => state.connectEndpoint)\n  const joinEndpoint = useSelector(state => state.joinEndpoint)\n  const sendEndpoint = useSelector(state => state.sendEndpoint)\n  const userId = useSelector(state => state.userId)\n  const messages = useSelector(state => state.messages)\n  const connected = useSelector(state => state.connected)\n  const messageValue = useSelector(state => state.messageValue)\n  const groupNameValue = useSelector(state => state.groupNameValue)\n  // const connectionId = useSelector(state => state.connectionId)\n  const groupJoined = useSelector(state => state.joined)\n\n  const dispatch = useDispatch()\n  const onSendFunc = props.onSendClick\n  const onJoinFunc = props.onJoinClick\n  const onConnectFunc = props.onConnectClick\n  return (\n    <div >\n      <h3>Your UserId: {userId}</h3>\n      <hr></hr>\n      <h3>{connected ? 'Connected' : 'Connect'} to your SignalR Hub {connected ? '(Refresh to Disconnect)' : ''}</h3>\n      <form onSubmit={evt => evt.preventDefault()}>\n        <input placeholder=\"Connect Endpoint ie. {fnx-url}/api{?code=key} (don't include /negotiate)\" value={connectEndpoint} onChange={(evt) => dispatch({ type: 'SET_CONNECT_ENDPOINT', endpoint: evt.target.value })} style={{width: 400}} disabled={connected} /><br/>\n        <input placeholder=\"Join Endpoint ie. {fnx-url}/api/addToGroup{?code=key}\" value={joinEndpoint} onChange={(evt) => dispatch({ type: 'SET_JOIN_ENDPOINT', endpoint: evt.target.value })} style={{width: 400}} disabled={connected}/><br />\n        <input placeholder=\"Send Endpoint ie. {fnx-url}/api/messages{?code=key}\" value={sendEndpoint} onChange={(evt) => dispatch({ type: 'SET_SEND_ENDPOINT', endpoint: evt.target.value })} style={{width: 400}} disabled={connected}/>\n        <button onClick={() => { onConnectFunc(connectEndpoint, userId) }} disabled={!(connectEndpoint && joinEndpoint && sendEndpoint) || connected}>{connected ? 'Connected' : 'Connect'}</button>\n      </form>\n      <br />\n      Join Group: \n      <form onSubmit={evt => evt.preventDefault()}>\n        <input value={groupNameValue} onChange={(evt) => dispatch({ type: 'SET_GROUP_VALUE', value: evt.target.value })} disabled={groupJoined} />\n        <button onClick={() => { onJoinFunc(joinEndpoint, groupNameValue, userId) }} disabled={!connected || groupJoined}>Join</button>\n      </form>\n      <br />\n      {groupJoined? `Send Message To ${groupJoined}:`:`Send:`}\n      <form onSubmit={evt => evt.preventDefault()}>\n        <input value={messageValue} onChange={(evt) => dispatch({ type: 'SET_MESSAGE', value: evt.target.value })} /> \n        <button onClick={() => { onSendFunc(sendEndpoint, messageValue, groupNameValue); dispatch({ type: 'SET_MESSAGE', value: '' }) }} disabled={!groupJoined}>Send</button>\n      </form>\n      <br /><br />\n      <div className=\"groupMessages\">\n        {groupJoined ? <h3>Messages from \"{groupJoined}\" Group</h3> : ''}\n        <div id=\"messages\">\n          {messages.map((_, index) => {\n            return (\n              <div key={index}>{_.message} <span style={{fontSize: 13}}> ({userId === _.userId ? `from ME`: `from ${_.userId}`})</span></div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as signalR from '@microsoft/signalr'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport shortid from 'shortid'\r\n\r\nconst defaultState = {\r\n  connectEndpoint: localStorage.getItem('react-signalr/connectEndpoint') || '',\r\n  joinEndpoint: localStorage.getItem('react-signalr/joinEndpoint') || '',\r\n  sendEndpoint: localStorage.getItem('react-signalr/sendEndpoint') || '',\r\n  userId: '',\r\n  groupNameValue: '', \r\n  messageValue: '', \r\n  connected: false,\r\n  groupJoined: null,\r\n  // connectionId: null,\r\n  messages: [],\r\n  members: []\r\n}\r\n\r\nconst userId = shortid.generate();\r\nconsole.log('userId:', userId)\r\n\r\nconst store = createStore((prev = defaultState, action ) => {\r\n  if (action.type === 'SET_CONNECT_ENDPOINT') {\r\n    localStorage.setItem('react-signalr/connectEndpoint', action.endpoint)\r\n    return {\r\n      ...prev,\r\n      connectEndpoint: action.endpoint\r\n    } \r\n  }\r\n\r\n  if (action.type === 'SET_JOIN_ENDPOINT') {\r\n    localStorage.setItem('react-signalr/joinEndpoint', action.endpoint)\r\n    return {\r\n      ...prev,\r\n      joinEndpoint: action.endpoint\r\n    } \r\n  }\r\n\r\n  if (action.type === 'SET_SEND_ENDPOINT') {\r\n    localStorage.setItem('react-signalr/sendEndpoint', action.endpoint)\r\n    return {\r\n      ...prev,\r\n      sendEndpoint: action.endpoint\r\n    } \r\n  }\r\n\r\n  if (action.type === 'SET_USER_ID') {\r\n    return {\r\n      ...prev,\r\n      userId: action.value\r\n    }\r\n  }\r\n\r\n  if (action.type === 'SET_GROUP_VALUE') {\r\n    return {\r\n      ...prev,\r\n      groupNameValue: action.value\r\n    }\r\n  }\r\n\r\n  if (action.type === 'SET_MESSAGE') {\r\n    return {\r\n      ...prev,\r\n      messageValue: action.value\r\n    }\r\n  }\r\n\r\n  if (action.type === 'SIGNALR_CONNECTED') {\r\n    return {\r\n      ...prev,\r\n      connected: true\r\n      // connectionId: action.connectionId\r\n    }\r\n  }\r\n\r\n  if (action.type === 'GROUP_JOINED') {\r\n    return {\r\n      ...prev,\r\n      joined: action.groupName\r\n    }\r\n  }\r\n\r\n  if (action.type === 'NEW_MESSAGE') {\r\n    return {\r\n      ...prev,\r\n      messages: [...prev.messages, action.message]\r\n    }\r\n  }\r\n\r\n  if (action.type === 'SET_MEMBERS') {\r\n    return {\r\n      ...prev,\r\n      members: action.members\r\n    }\r\n  }\r\n\r\n  return prev\r\n})\r\n\r\nstore.dispatch({type: 'SET_USER_ID', value: userId})\r\n\r\nconst connectHub = (connectEndpoint, userId) => {\r\n  let connection = new signalR.HubConnectionBuilder()\r\n  .withUrl(`${connectEndpoint}&userId=${userId}`, {\r\n    transport: signalR.HttpTransportType.WebSockets\r\n  })\r\n  .build();\r\n\r\n  connection.on(\"group:newMessage\", data => {\r\n    console.log('group:newMessage payload', data)\r\n    store.dispatch({type: 'NEW_MESSAGE', message: data})\r\n  });\r\n\r\n  connection.on(\"group:memberJoined\", data => {\r\n    console.log('group:memberJoined payload', data)\r\n    if (data.newMember === userId) {\r\n      store.dispatch({type: 'GROUP_JOINED', groupName: data.groupName})\r\n    }\r\n  });\r\n\r\n  connection.on(\"group:memberLeft\", data => {\r\n    console.log('group:memberLeft payload', data)\r\n  });\r\n\r\n  connection.on(\"global:newMessage\", data => {\r\n    console.log('global:newMessage payload', data)\r\n  });\r\n\r\n  connection.on(\"user:newMessage\", data => {\r\n    console.log('user:newMessage payload', data)\r\n  });\r\n\r\n  connection.on(\"global:memberLeft\", data => {\r\n    console.log('global:memberLeft payload', data)\r\n  });\r\n\r\n  connection\r\n  .start()\r\n  .then((info) => {\r\n    console.log('connectionId:', connection.connectionId)\r\n    const { connectionId } = connection\r\n    console.log('invoking send')\r\n    console.log('connected to signalR')\r\n    store.dispatch({ type: 'SIGNALR_CONNECTED', connectionId })\r\n    // sendMessage(`hello from initial load ${Date().toString()}`)\r\n  });\r\n}\r\n\r\n\r\nconst sendMessage = (sendEndpoint, message, group) => {\r\n  return fetch(`${sendEndpoint}&userId=${userId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      messageData: {message, userId},\r\n      // userId,\r\n      targetGroupName: group\r\n    })\r\n  })\r\n}\r\n\r\nconst joinGroup = (joinEndpoint, name, userId) => {\r\n  console.log('joining group...')\r\n  return fetch(`${joinEndpoint}&groupName=${name}&userId=${userId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({\r\n      groupName: name,\r\n      userId\r\n    })\r\n  })\r\n  .catch((err) => {console.log(err)})\r\n  .then(() => {\r\n    \r\n  })\r\n}\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App onConnectClick={connectHub} onSendClick={sendMessage} onJoinClick={joinGroup} />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}